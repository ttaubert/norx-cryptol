/*
 * NORX 2.0 Cryptol implementation by Tim Taubert <tim@timtaubert.de>.
 *
 * The specification can be found at <https://norx.io/data/norx.pdf>.
 *
 * To the extent possible under law, the author(s) have dedicated all copyright
 * and related and neighboring rights to this software to the public domain
 * worldwide. This software is distributed without any warranty.
 *
 * You should have received a copy of the CC0 Public Domain Dedication along with
 * this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
 */

module NORX64Impl where

// Word size of the internal state.
type Nw = 64

// Rotation offsets.
rot : ([6], [6], [6], [6])
rot = (8, 19, 40, 63)

// Test vectors.
tests = {

  // Initial state.
  vec_init_const =
      [0xe4d324772b91df79, 0x3aec9abaaeb02ccb, 0x9dfba13db4289311,
       0xef9eb4bf5a97f2c8, 0x3f466e92c1532034, 0xe6e986626cc405c1,
       0xace40f3b549184e1, 0xd9cfd35762614477, 0xb15e641748de5e6b,
       0xaa95e955e10f8410, 0x28d1034441a9dd40, 0x7f31bbf964e93bf5,
       0xb5e9e22493dffb96, 0xb980c852479fafbd, 0xda24516bf55eafd4,
       0x86026ae8536f1501],

  // State after initialisation.
  vec_init4 =
      [0xe5f46094878a8b67, 0x9d91985bc08a6de0, 0x7a257a96202fb03d,
       0xc3c8a1b9544950e4, 0xa7dd2bb9df0113e3, 0x4cb4ba1af1e08ae7,
       0xa11d70be7a68dd9c, 0x5f29b9540e0824a7, 0xfa14572ec030682c,
       0xb3def83462277111, 0x61079fbeeae3dc47, 0x379021175e684e47,
       0x48cbbaa6c5d79358, 0x3ee1e2cb3bc69e6a, 0x1825f80df73cec32,
       0x350d2b8123057b3c],

  vec_init6 =
      [0x76FBD39C51C13C93, 0x52757303FF789049, 0x2BF64476E08BEAB3,
       0x7853121D4956D973, 0x51CEC6828811E368, 0x0814909AA24F5904,
       0x0F5B60F5A93774B0, 0x6902478A97469300, 0xACEB8ABE024A000F,
       0x21971BBAC8696E13, 0x2B75B95601458C00, 0x7D0B1CFB1BE8C43B,
       0x318992BCBAE05D6A, 0x6EE527E385FD3305, 0x9219026A5BF673C4,
       0x41F58E8B64064E08],

  // State after header processing.
  vec_header4 =
      [0x26d6f79dad83dd7e, 0xcd0f5ddcc0669c87, 0x7e6a4d9c4b7c73c5,
       0x6b9a809124b1e25a, 0x94e9edaf09b0b175, 0x91c4d4fa12952c0a,
       0x4b8d3496625035fe, 0xc0c605b6f658980e, 0x2f3189200c6853b4,
       0xfcff65878a7eb5be, 0x0b8f39e049e8daac, 0xc8d39dfea5f2b656,
       0x05d912c5460e50ae, 0x329b8aab29cfc0c4, 0xf08c6bbb97c3ec98,
       0x5eccde8fdaf538e2],

  vec_header6 =
      [0x3935320CAC83A708, 0x885681ED01EBC63A, 0x055ACE3D2A35B24B,
       0x1E7B4321B816E51B, 0x2D16F729A73E9C1D, 0xB482ACAA96005B25,
       0xF44CDB6C6042C47D, 0xD8142A91D9F90940, 0x2439D8D89D8CAC25,
       0xE94E6341950A1083, 0x655775BF551195A8, 0x0E5939FA8F1CE9CD,
       0xC9B0B9D02EDFCC32, 0x2E8E4EBD80047E51, 0x6116C9853EFF4D6F,
       0x2BE9E97060FF36BE],

  // State after message encryption.
  vec_encryption4 =
      [0xf0b100a7748aece2, 0x99f9897c8fa0b3e1, 0xd6152280e3a5234e,
       0x27148fd2f4fe5d71, 0x7882af4f2e417f1e, 0xa6046c51725cf7eb,
       0xad8ac693fbd2c107, 0xbf2521681e512c0c, 0x8cf120f5a42ae6f1,
       0x1baf40d42f743c2a, 0xa6a7d33ad16c0849, 0xe381b8e46492a2b4,
       0x70da708de96d3a93, 0x2f5eac58ba0f53ef, 0x9b1549add5da2e0b,
       0x705ddb394b4101b3],

  vec_encryption6 =
      [0xA0BC72BC1DCB2403, 0xFF6107394AF0E50E, 0xF3BD7276381906F9,
       0xF61F84D8396FB31C, 0xBD723C8927B712FD, 0x2344C7FD033CE0D4,
       0xFDE150253CED10B6, 0xF4C42A8303AFC52D, 0x5125F7A82BE38DCC,
       0xFAE61D10BE5F8055, 0x2154210104E3B2B2, 0xC14D13D536548CD9,
       0xD47BBE8AFA679DE1, 0xAEB82B8A33B7F824, 0x49B5CD9AD7A09059,
       0x1F9E8EF60FB85C51],

  // State after trailer processing.
  vec_trailer4 =
      [0x77cf22aa996e7ac0, 0xf505acd994c83361, 0xee03e257c3edacf7,
       0xae5ea67159b7a126, 0x6a38f48bd4eb0e77, 0x09234c73133fcbdd,
       0xc8aa9235006e8d11, 0xbb97efedf3550863, 0x78750c1f4c49ac98,
       0x24e819297ba25825, 0xe8189dbcadcd1f28, 0xcaafc91275d8719d,
       0xe4ea456d4954cd43, 0x29ca6aebeb98c24a, 0x50983c29330ffb43,
       0xc2bc8defa8d9608f],

  vec_trailer6 =
      [0xD80DF9F3C207166E, 0x893333B35BB7154A, 0x42AB7295AE0B79DB,
       0x90D146E31BA8D93B, 0x78C9AAAC4434B284, 0xFD0AD55007C6FBAE,
       0x08ACE9E640708176, 0xD65DE5AD9DD4B687, 0xDC3680BA6D6D7F29,
       0xF043599666D3321A, 0xB24D01130ACBFEA4, 0x9E5F4E4AD2A0642D,
       0x08FA43BCBBAE23B9, 0xD4EE30E13F385752, 0x058CEF9D316E3B8C,
       0xC9D8DA2797AF2D5E],

  // State after finalisation.
  vec_final4 =
      [0xd16e157b3d5b1215, 0xf88f48e821887734, 0xea37332a570dada2,
       0x305766b464bb8443, 0x07b68aec3b1b4a8b, 0x5fdf4f14249b8a92,
       0xbcd466c42f52871c, 0x527989dbd1876236, 0xd9ec97715de78b2a,
       0xd9fe3fc995fe4638, 0xe2c6be970a0ced73, 0x98292302a546da7f,
       0x01f5400f30c79b7b, 0x7dff06ac557b048c, 0xd91008cad6885bfe,
       0x97ede7d253393bf6],

  vec_final6 =
      [0xF5F912AC9877E37D, 0x6DA8385714926C74, 0x77A3D1989F00590C,
       0xF2388309731AF4D4, 0x3EC35DA675CD5E01, 0xE9D8F8FE07CC4467,
       0x314F49CA4998D7EA, 0x67025BCA91C7470B, 0x1B874F4FDFACDC07,
       0x0F0EB5FBA371BC73, 0x520D19766BE5187F, 0x7F97635256E74DA2,
       0xCE5A62B68D57E346, 0xA00D3648E908217B, 0xC9119CE74284E01E,
       0x61F81A7D92EC8E34],

  // Ciphertext.
  vec_ciphertext4 =
      [0x62, 0x10, 0x4a, 0xc4, 0x97, 0xff, 0x39, 0xf9,
       0x51, 0x60, 0xa6, 0x9e, 0x07, 0x3f, 0x89, 0x89,
       0x40, 0x55, 0xf4, 0x75, 0xfa, 0x8e, 0x08, 0x96,
       0x8e, 0xec, 0xad, 0x33, 0x9c, 0xbb, 0x03, 0x30,
       0x9a, 0xa7, 0x43, 0x72, 0xb4, 0xc4, 0xfb, 0x3c,
       0xe1, 0x3c, 0xa2, 0xc7, 0x48, 0x49, 0xdb, 0xa1,
       0xda, 0xb1, 0x69, 0xd0, 0x21, 0xc1, 0xd5, 0x16,
       0xf6, 0x61, 0xa6, 0xd2, 0x1f, 0xc5, 0xb9, 0x37,
       0xe4, 0x59, 0xb2, 0x9d, 0xc4, 0xdc, 0xfa, 0x78,
       0x41, 0x0c, 0x7d, 0x64, 0x29, 0x9a, 0x30, 0x9b,
       0x9d, 0xb1, 0x72, 0x3c, 0xef, 0x74, 0x21, 0xe8,
       0x67, 0x08, 0x3d, 0x26, 0x83, 0x39, 0xb5, 0x24,
       0xe2, 0xec, 0x8a, 0x74, 0xa7, 0x00, 0xb1, 0xf0,
       0xe1, 0xb3, 0xa0, 0x8f, 0x7c, 0x89, 0xf9, 0x99,
       0x4e, 0x23, 0xa5, 0xe3, 0x80, 0x22, 0x15, 0xd6,
       0x71, 0x5d, 0xfe, 0xf4, 0xd2, 0x8f, 0x14, 0x27],

  vec_ciphertext6 =
      [0x7E, 0xB0, 0xE2, 0x87, 0x73, 0x2C, 0x75, 0x9C,
       0x96, 0x09, 0x94, 0x43, 0x77, 0x4C, 0xB6, 0x58,
       0x5D, 0xFD, 0xF0, 0xE0, 0xD6, 0xA4, 0xBF, 0xAB,
       0xDA, 0x9E, 0x7F, 0x01, 0x34, 0x78, 0x83, 0x60,
       0x96, 0x5B, 0xF1, 0xF6, 0x21, 0x1D, 0xB6, 0xE8,
       0x58, 0xB7, 0x6A, 0xA4, 0x4B, 0x5B, 0x08, 0x16,
       0xCF, 0x27, 0x87, 0x7C, 0x81, 0xAF, 0xC7, 0x97,
       0xC4, 0x72, 0x02, 0x79, 0x0E, 0x38, 0xC8, 0x8C,
       0x4C, 0x2F, 0x0F, 0x71, 0x34, 0x45, 0x26, 0x84,
       0xC6, 0x6E, 0x37, 0x8B, 0xB9, 0x67, 0x2C, 0xAA,
       0x24, 0x5F, 0x23, 0xE0, 0x5E, 0x00, 0x7F, 0xC9,
       0x15, 0xCC, 0x68, 0xAC, 0x49, 0x56, 0x35, 0x74,
       0x03, 0x24, 0xCB, 0x1D, 0xBC, 0x72, 0xBC, 0xA0,
       0x0E, 0xE5, 0xF0, 0x4A, 0x39, 0x07, 0x61, 0xFF,
       0xF9, 0x06, 0x19, 0x38, 0x76, 0x72, 0xBD, 0xF3,
       0x1C, 0xB3, 0x6F, 0x39, 0xD8, 0x84, 0x1F, 0xF6],

  // Authentication tag.
  vec_tag4 =
      [0x15, 0x12, 0x5b, 0x3d, 0x7b, 0x15, 0x6e, 0xd1,
       0x34, 0x77, 0x88, 0x21, 0xe8, 0x48, 0x8f, 0xf8,
       0xa2, 0xad, 0x0d, 0x57, 0x2a, 0x33, 0x37, 0xea,
       0x43, 0x84, 0xbb, 0x64, 0xb4, 0x66, 0x57, 0x30],

  vec_tag6 =
      [0x7D, 0xE3, 0x77, 0x98, 0xAC, 0x12, 0xF9, 0xF5,
       0x74, 0x6C, 0x92, 0x14, 0x57, 0x38, 0xA8, 0x6D,
       0x0C, 0x59, 0x00, 0x9F, 0x98, 0xD1, 0xA3, 0x77,
       0xD4, 0xF4, 0x1A, 0x73, 0x09, 0x83, 0x38, 0xF2]

}
