/*
 * NORX 2.0 Cryptol implementation by Tim Taubert <tim@timtaubert.de>.
 *
 * The specification can be found at <https://norx.io/data/norx.pdf>.
 *
 * To the extent possible under law, the author(s) have dedicated all copyright
 * and related and neighboring rights to this software to the public domain
 * worldwide. This software is distributed without any warranty.
 *
 * You should have received a copy of the CC0 Public Domain Dedication along with
 * this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
 */

module NORX32Impl where

// Word size of the internal state.
type Nw = 32

// Rotation offsets.
rot : ([6], [6], [6], [6])
rot = (8, 11, 16, 31)

// Test vectors.
tests = {

  // Initial state.
  vec_init_const =
      [0x0454edab, 0xac6851cc, 0xb707322f, 0xa0c7c90d,
       0x99ab09ac, 0xa643466d, 0x21c22362, 0x1230c950,
       0xa3d8d930, 0x3fa8b72c, 0xed84eb49, 0xedca4787,
       0x335463eb, 0xf994220b, 0xbe0bf5c9, 0xd7c49104],

  // State after initialisation.
  vec_init4 =
      [0x2a878673, 0xee1c2b8c, 0x94e41462, 0xe6f99787,
       0x1b90ce6a, 0xa18cd777, 0xda58c1a7, 0x44a3bc15,
       0x91d3a9ec, 0x235bbce1, 0x97c2fdf8, 0x329735f2,
       0x4ceefccc, 0x8737252b, 0xd73b823b, 0x4f53b645],

  vec_init6 =
      [0x49b4a0ad, 0x45a8bd64, 0xc9491c37, 0xda94ad3a,
       0x0a56f675, 0x5a269ced, 0x19dacb30, 0x5a090476,
       0xb2be631f, 0x31c56682, 0xf64767a3, 0x65a5ae10,
       0x74dceab6, 0x773f71a2, 0xbbaeb53b, 0x90fcee05],

  // State after header processing.
  vec_header4 =
      [0xc59fd03e, 0x5785b42b, 0xb6cbf54c, 0x90004eda,
       0xbb7d6d72, 0xf9989dc6, 0xe2a06d50, 0x43a2c3af,
       0xfdaae2f5, 0xfe32e309, 0x5221792a, 0xd9f96eab,
       0x0c55eec7, 0xf3ef5fac, 0xe7fa58e1, 0x22fd6d9c],

  vec_header6 =
      [0xd74a8393, 0x6d0ac471, 0xcc7a1e12, 0x26c3729f,
       0x6978169b, 0x08ab1d5c, 0xb76fdd3a, 0x4af0ddcb,
       0x98b794c2, 0x48d3e784, 0xd64663ca, 0x3b4ab8de,
       0xaef849d6, 0xd2a7a723, 0x0607c246, 0x2a84390b],

  // State after message encryption.
  vec_encryption4 =
      [0xfedbc5e6, 0x142fb141, 0x8334d280, 0x1e116527,
       0xefde094c, 0x1697e39f, 0x7c21d218, 0x1e92774b,
       0xd2095d7d, 0xd979e560, 0x82cf4349, 0xec30dd09,
       0x128f82be, 0x6544bfb8, 0xef1a52ac, 0x5e5f1fed],

  vec_encryption6 =
      [0x1075d283, 0xac1f9114, 0x15849073, 0x43998991,
       0xfcad7129, 0xe6094691, 0x6c509f88, 0x3c4f7d24,
       0x5888e757, 0x40e53c0f, 0x01e81b2d, 0xea81ff9b,
       0xbd5560e0, 0x37573b47, 0x0bfbb5c5, 0xe4249955],

  // State after trailer processing.
  vec_trailer4 =
      [0xbd51e53d, 0xe1491c17, 0xb0f2a15c, 0x79a47756,
       0xdc954a9d, 0x5feccb91, 0x6df4bd69, 0x8d971403,
       0x67c7b5f5, 0xe6ae4fa1, 0x2abdc3d0, 0x4b8cc3a4,
       0x8a926377, 0x89f06163, 0xe19986a1, 0xebbc5255],

  vec_trailer6 =
      [0xd6156eb9, 0x0d1add96, 0x5ea107a6, 0xa291eea4,
       0x6b9b9da1, 0xbed38408, 0xe806fecd, 0xad0df9bb,
       0x3102ab45, 0xa12fa1f6, 0x40cef800, 0xc171d4c3,
       0xf83ceda8, 0x466675ee, 0xb09d8343, 0xab6c631a],

  // State after finalisation.
  vec_final4 =
      [0x1e131078, 0x1eab2eea, 0x235da05d, 0x99cbe3d4,
       0x02a9b200, 0xf4398b31, 0x6a8afb2a, 0xf20519cc,
       0x30374067, 0xdad9e66e, 0xe73f2a1b, 0x7b0b6c47,
       0x83719333, 0x33e14aac, 0xc25b534a, 0xf90da3da],

  vec_final6 =
      [0xb6d1ac7a, 0x6da7dc80, 0x4a62b573, 0x0c148012,
       0xcd3ca96e, 0x3e325df0, 0x55376aa9, 0x2f958b5e,
       0xf42d34d7, 0xf40add06, 0x1ff77253, 0x1d3349e6,
       0x6db79321, 0xabf43f26, 0x7b8c3cf2, 0xbc87aded],

  // Ciphertext.
  vec_ciphertext4 =
      [0xf4, 0xaf, 0xc8, 0xe6, 0x6d, 0x2d, 0x80, 0xde,
       0x0a, 0x7f, 0x71, 0x9c, 0x89, 0x96, 0x24, 0xc9,
       0xad, 0x89, 0x6e, 0xc7, 0xc6, 0x17, 0x39, 0xd5,
       0x37, 0x6d, 0x06, 0x48, 0xc7, 0xbc, 0xb2, 0x04,
       0xe5, 0x7d, 0xb0, 0x5c, 0x6f, 0x83, 0xb3, 0xff,
       0x43, 0x15, 0xe8, 0xa4, 0xef, 0x2f, 0x2c, 0x85,
       0x5f, 0x21, 0xea, 0x4c, 0x51, 0xac, 0x6d, 0xe5,
       0x75, 0x77, 0x3b, 0xa5, 0x48, 0xf3, 0x6e, 0x63,
       0x6a, 0x13, 0xb9, 0x79, 0xd9, 0x53, 0xbb, 0x91,
       0x29, 0x8e, 0xa4, 0xa6, 0xe2, 0xaa, 0x27, 0x40,
       0x29, 0x91, 0xe0, 0xda, 0x54, 0x19, 0x97, 0x82,
       0x54, 0x07, 0xb2, 0xf1, 0x24, 0x41, 0xde, 0x3a,
       0xe6, 0xc5, 0xdb, 0xfe, 0x41, 0xb1, 0x2f, 0x14,
       0x80, 0xd2, 0x34, 0x83, 0x27, 0x65, 0x11, 0x1e,
       0x4c, 0x09, 0xde, 0xef, 0x9f, 0xe3, 0x97, 0x16,
       0x18, 0xd2, 0x21, 0x7c, 0x4b, 0x77, 0x92, 0x1e],

  vec_ciphertext6 =
      [0x1a, 0x59, 0xbd, 0x08, 0xc4, 0x09, 0x90, 0x97,
       0xed, 0x27, 0x04, 0xa8, 0x7b, 0x2f, 0x8b, 0x48,
       0xe1, 0x65, 0x99, 0x14, 0x60, 0x99, 0x4f, 0x3d,
       0x57, 0x9b, 0x1b, 0x13, 0x76, 0x99, 0x24, 0x4e,
       0x8c, 0xcb, 0x0b, 0x8e, 0x15, 0xf0, 0xf0, 0x3c,
       0x18, 0x87, 0x71, 0x9c, 0x03, 0xa2, 0x5a, 0xb3,
       0x41, 0x3d, 0xc3, 0xb1, 0x9d, 0x85, 0xd3, 0x15,
       0x11, 0x50, 0x74, 0xee, 0x84, 0x51, 0x95, 0xbf,
       0xeb, 0xa5, 0x06, 0xa1, 0x8e, 0x6a, 0xa5, 0xa4,
       0xc8, 0x8f, 0xc8, 0x4b, 0x0d, 0x3f, 0x53, 0x5a,
       0x7f, 0xb5, 0x74, 0x0f, 0x16, 0x6b, 0x5b, 0x9a,
       0x23, 0xe8, 0x78, 0xf5, 0xcd, 0x55, 0x5e, 0x81,
       0x83, 0xd2, 0x75, 0x10, 0x14, 0x91, 0x1f, 0xac,
       0x73, 0x90, 0x84, 0x15, 0x91, 0x89, 0x99, 0x43,
       0x29, 0x71, 0xad, 0xfc, 0x91, 0x46, 0x09, 0xe6,
       0x88, 0x9f, 0x50, 0x6c, 0x24, 0x7d, 0x4f, 0x3c],

  // Authentication tag.
  vec_tag4 =
      [0x78, 0x10, 0x13, 0x1e, 0xea, 0x2e, 0xab, 0x1e,
       0x5d, 0xa0, 0x5d, 0x23, 0xd4, 0xe3, 0xcb, 0x99],

  vec_tag6 =
      [0x7a, 0xac, 0xd1, 0xb6, 0x80, 0xdc, 0xa7, 0x6d,
       0x73, 0xb5, 0x62, 0x4a, 0x12, 0x80, 0x14, 0x0c]

}
