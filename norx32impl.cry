/*
 * NORX 3.0 Cryptol implementation by Tim Taubert <tim@timtaubert.de>.
 *
 * The specification can be found at <https://norx.io/data/norx.pdf>.
 *
 * To the extent possible under law, the author(s) have dedicated all copyright
 * and related and neighboring rights to this software to the public domain
 * worldwide. This software is distributed without any warranty.
 *
 * You should have received a copy of the CC0 Public Domain Dedication along with
 * this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
 */

module NORX32Impl where

// Word size of the internal state.
type Nw = 32

// Rotation offsets.
rot : ([6], [6], [6], [6])
rot = (8, 11, 16, 31)

// Test vectors.
tests = {

  // Initial state.
  vec_init_const =
      [0x0454edab, 0xac6851cc, 0xb707322f, 0xa0c7c90d,
       0x99ab09ac, 0xa643466d, 0x21c22362, 0x1230c950,
       0xa3d8d930, 0x3fa8b72c, 0xed84eb49, 0xedca4787,
       0x335463eb, 0xf994220b, 0xbe0bf5c9, 0xd7c49104],

  // State after initialisation.
  vec_init4 =
      [0x7dd54975, 0xc374ffc8, 0x1df66f83, 0x08cef7e9,
       0xca5295e8, 0x8e1e6324, 0x538244da, 0x3091dc5d,
       0x5288e900, 0xeddafb81, 0x1a345ae0, 0x933ec3ab,
       0xbed76eb5, 0x8b64d948, 0xa59bd31b, 0x6bbbd034],

  vec_init6 =
      [0x6aa9881b, 0xe39461d4, 0x72e17e31, 0xd42e766a,
       0x773c7827, 0xe93c085f, 0x08201969, 0x1e455c9d,
       0x016fdb2e, 0xab3de913, 0x69289a33, 0xa5ce3028,
       0xc18142e4, 0x71f18d99, 0xce8fd48d, 0x1c141f99],

  // State after header processing.
  vec_header4 =
      [0x2dfda46b, 0x956d99e2, 0xde62a45d, 0x59a4ad56,
       0xf9a5411a, 0x759c0658, 0x45cf1ea3, 0xa9515464,
       0x60cca3c1, 0xa29f076d, 0xfaa12e42, 0xea22ed90,
       0x7d10ba9d, 0x407e2c5b, 0x97dc4fa4, 0x80401262],

  vec_header6 =
      [0x2c6cf747, 0x221aa528, 0xe21d7954, 0x70765726,
       0x48bed941, 0x5dec2685, 0x628316cc, 0xd117c238,
       0xa86f0d92, 0xe606ecaf, 0x60b283a8, 0x5b654a7b,
       0xc9acd7ac, 0x89250d1c, 0xf4dd1b13, 0x84075320],

  // State after message encryption.
  vec_encryption4 =
      [0x9769850c, 0x41240274, 0xa264e03a, 0xb808815a,
       0x9285a6d3, 0x8665c774, 0xed279ce2, 0x9571fb11,
       0xf39624ed, 0x3dce8561, 0x81879ff2, 0x45b5e234,
       0x10d6694e, 0xaff8a691, 0x9991aece, 0xbffa4576],

  vec_encryption6 =
      [0xf357c5ac, 0x11e7dcd2, 0x480a43a5, 0xa263168c,
       0x48816707, 0x6b3ac79a, 0x39fe6afb, 0x979fe76a,
       0x84cf2d94, 0x357f0f56, 0x883edba4, 0x8d7ba338,
       0x85f97717, 0x187f6b85, 0x04ed8b2e, 0xa5671d54],

  // State after trailer processing.
  vec_trailer4 =
      [0xbbab2c4a, 0x42bf34a5, 0x3ad53dfa, 0xaf184f4d,
       0x66a33356, 0x481aae25, 0x471e110f, 0x9fbc7740,
       0x33a4cbdb, 0x5ca77a41, 0xabcdf216, 0x1a213fe2,
       0x353816ec, 0x8eff5abe, 0x3fb2298b, 0xe4a9ec82],

  vec_trailer6 =
      [0x72fc85ac, 0x5ce4f0d1, 0xf67a024c, 0xa2ba77e4,
       0x8ef884ef, 0x7864fc01, 0x24984d54, 0xc00489ba,
       0x727789e5, 0xee8b24fe, 0x546c3f3a, 0x0d32d7b4,
       0x843b41cb, 0xfc32b163, 0x0e659e5a, 0xecac8817],

  // State after finalisation.
  vec_final4 =
      [0x97537d63, 0x63ac168c, 0x6cef0f5b, 0xec0114e9,
       0xd6a022ec, 0xff4395e0, 0x4f29b8b5, 0xb8cc8998,
       0xd92c5c49, 0x74ba3cef, 0x964eedd3, 0x23df1024,
       0xbce454d5, 0x89b75b6b, 0xea597754, 0x47cfffcd],

  vec_final6 =
      [0x8d3e098f, 0x4d470e23, 0x219829ee, 0x96a87c5b,
       0x189b7d32, 0x03413845, 0x0d513c08, 0x436ecf50,
       0x54ed6ae8, 0x88bb869a, 0x78a96727, 0x13a396ef,
       0x8f1ab1b3, 0xb1f1949a, 0xe95318ac, 0x4a26434c],

  // Ciphertext.
  vec_ciphertext4 =
      [0x6c, 0xe9, 0x4c, 0xb5, 0x48, 0xb2, 0x0f, 0xed,
       0x7b, 0x68, 0xc6, 0xac, 0x60, 0xac, 0x4c, 0xb5,
       0xeb, 0xb1, 0xf0, 0x9a, 0xec, 0x5a, 0x75, 0x0e,
       0xcf, 0x50, 0xec, 0x0e, 0x64, 0x93, 0x8b, 0xf2,
       0x40, 0x17, 0xa4, 0xff, 0x06, 0x84, 0xf8, 0x08,
       0xa6, 0x7c, 0x19, 0x6c, 0x31, 0xa0, 0xaf, 0x12,
       0x56, 0x9b, 0xe5, 0xf7, 0xc5, 0x6a, 0xd3, 0xbc,
       0xac, 0x88, 0xda, 0x36, 0x86, 0x57, 0x5f, 0x93,
       0x43, 0x96, 0x8d, 0xa2, 0x20, 0x77, 0xee, 0xcc,
       0xe7, 0xd6, 0x63, 0x17, 0x49, 0x08, 0xa3, 0xf7,
       0x3c, 0x9e, 0x9a, 0xc1, 0x49, 0xb5, 0xce, 0x6b,
       0xe6, 0x9c, 0x9e, 0x31, 0x7c, 0xd7, 0xe7, 0xe8,
       0x0c, 0x85, 0x69, 0x97, 0x74, 0x02, 0x24, 0x41,
       0x3a, 0xe0, 0x64, 0xa2, 0x5a, 0x81, 0x08, 0xb8,
       0xd3, 0xa6, 0x85, 0x92, 0x74, 0xc7, 0x65, 0x86,
       0xe2, 0x9c, 0x27, 0xed, 0x11, 0xfb, 0x71, 0x95],

  vec_ciphertext6 =
      [0x20, 0x9b, 0x0b, 0x2a, 0xfe, 0x36, 0x2a, 0x83,
       0x3b, 0xb1, 0x8a, 0xcf, 0x03, 0xe1, 0xd0, 0xc2,
       0x7c, 0x69, 0x47, 0x52, 0x66, 0x79, 0x47, 0xfc,
       0x73, 0x8c, 0x0e, 0x40, 0xe3, 0xd5, 0x97, 0xc2,
       0x2d, 0x74, 0xe9, 0x06, 0xe8, 0xc4, 0x73, 0xad,
       0xf0, 0xdb, 0x63, 0x61, 0xd3, 0x97, 0x41, 0xc4,
       0x26, 0x0f, 0xb3, 0xd3, 0x9f, 0x84, 0x22, 0xa3,
       0xcf, 0xdf, 0x93, 0x0d, 0x2d, 0x17, 0x75, 0xeb,
       0x3f, 0x97, 0x0e, 0x52, 0x95, 0x23, 0x07, 0xc9,
       0xaa, 0x07, 0x3f, 0xc5, 0xe1, 0x19, 0xba, 0xdf,
       0xb2, 0xff, 0x00, 0x9e, 0x69, 0x7c, 0x8e, 0x85,
       0x61, 0x4f, 0x44, 0x78, 0xc5, 0x7b, 0xd2, 0xb4,
       0xac, 0xc5, 0x57, 0xf3, 0xd2, 0xdc, 0xe7, 0x11,
       0xa5, 0x43, 0x0a, 0x48, 0x8c, 0x16, 0x63, 0xa2,
       0x07, 0x67, 0x81, 0x48, 0x9a, 0xc7, 0x3a, 0x6b,
       0xfb, 0x6a, 0xfe, 0x39, 0x6a, 0xe7, 0x9f, 0x97],

  // Authentication tag.
  vec_tag4 =
      [0xd5, 0x54, 0xe4, 0xbc, 0x6b, 0x5b, 0xb7, 0x89,
       0x54, 0x77, 0x59, 0xea, 0xcd, 0xff, 0xcf, 0x47],

  vec_tag6 =
      [0xb3, 0xb1, 0x1a, 0x8f, 0x9a, 0x94, 0xf1, 0xb1,
       0xac, 0x18, 0x53, 0xe9, 0x4c, 0x43, 0x26, 0x4a]

}
