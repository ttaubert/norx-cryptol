/**
 * NORX 2.0 Cryptol implementation by Tim Taubert <tim@timtaubert.de>.
 *
 * The specification can be found at <https://norx.io/data/norx.pdf>.
 *
 * To the extent possible under law, the author(s) have dedicated all copyright
 * and related and neighboring rights to this software to the public domain
 * worldwide. This software is distributed without any warranty.
 *
 * You should have received a copy of the CC0 Public Domain Dedication along with
 * this software. If not, see <http://creativecommons.org/publicdomain/zero/1.0/>.
 */

F : [6] -> [16][32] -> [16][32]
F l s = xs @ l
    where xs = [s] # [ qround x | x <- xs ]

G s = G_sub (G_sub s 8 11) 16 31 // different rotations for 64-bit (?)

G_sub : [4][32] -> [6] -> [6] -> [4][32]
G_sub [a, b, c, d] r0 r1 = [a', b', c', d']
    where H x y = (x ^ y) ^ ((x && y) << 1)
          a' = H a b
          d' = (a' ^ d) >>> r0
          c' = H c d'
          b' = (b ^ c') >>> r1

qround [s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15] =
       [u0, u1, u2, u3, u4, u5, u6, u7, u8, u9, u10, u11, u12, u13, u14, u15]
    where
        // column step
        [t0, t4, t8,  t12] = G [s0, s4, s8,  s12]
        [t1, t5, t9,  t13] = G [s1, s5, s9,  s13]
        [t2, t6, t10, t14] = G [s2, s6, s10, s14]
        [t3, t7, t11, t15] = G [s3, s7, s11, s15]
        // diagonal step
        [u0, u5, u10, u15] = G [t0, t5, t10, t15]
        [u1, u6, u11, u12] = G [t1, t6, t11, t12]
        [u2, u7, u8,  u13] = G [t2, t7, t8,  t13]
        [u3, u4, u9,  u14] = G [t3, t4, t9,  t14]

/**
 * Test Vectors [A.1]
 */
property p_a1 = F 2 [0..15] == [0x0454edab, 0xac6851cc, 0xb707322f, 0xa0c7c90d,
                                0x99ab09ac, 0xa643466d, 0x21c22362, 0x1230c950,
                                0xa3d8d930, 0x3fa8b72c, 0xed84eb49, 0xedca4787,
                                0x335463eb, 0xf994220b, 0xbe0bf5c9, 0xd7c49104]

/**
 * Test Vectors [A.2]
 */
K = [0..15] : [16][8]
N = [ x << 4 | x <- reverse ([8..15] : [8][8]) ]
A = [0..127] : [128][8]
M = [0..127] : [128][8]
Z = [0..127] : [128][8]

// TODO define type for state ?

// TODO ???
words_le x = [ join (reverse y) | y <- split x ]

initialise : [6] -> [16][8] -> [8][8] -> [16][32]
initialise l k n = F l [n0, n1, u2, u3, k0, k1, k2, k3, u8, u9, u10, u11, u12 ^ 32, u13 ^ 4, u14 ^ 1, u15 ^ 128]
    where [u0, u1, u2, u3, u4, u5, u6, u7, u8, u9, u10, u11, u12, u13, u14, u15] = F 2 [0..15]
          [k0, k1, k2, k3] = words_le k
          [n0, n1] = words_le n

/* Multi-rate padding. */
pad : {n, floor} (fin n, floor == n / 48) => [n][8] -> [n + 48 - n % 48][8]
pad x = groupBy (take padded)
    where padded : [48 * (floor + 1) * 8]
          padded = (join x) # ((0x01 # zero) ^ (zero # 0x80))

/* Absorb additional data. */
absorb : {n} (fin n) => [16][32] -> [6] -> [n][8] -> [32] -> [16][32]
absorb s l x v = ys ! 0
    where ys = [s] # [ step y b | b <- groupBy`{48} (pad x) | y <- ys ]
          step st b = (F l (tag st)) ^ words_le (b # zero)
          tag st = (take`{15} st) # [(st ! 0) ^ v]

// [NORX32-4-1] State after initialisation.
property p_a2_1 = initialise 4 K N ==
    [0x2a878673, 0xee1c2b8c, 0x94e41462, 0xe6f99787,
     0x1b90ce6a, 0xa18cd777, 0xda58c1a7, 0x44a3bc15,
     0x91d3a9ec, 0x235bbce1, 0x97c2fdf8, 0x329735f2,
     0x4ceefccc, 0x8737252b, 0xd73b823b, 0x4f53b645]

// [NORX32-4-1] State after header processing.
property p_a2_2 = absorb (initialise 4 K N) 4 A 0x00000001 ==
    [0xc59fd03e, 0x5785b42b, 0xb6cbf54c, 0x90004eda,
     0xbb7d6d72, 0xf9989dc6, 0xe2a06d50, 0x43a2c3af,
     0xfdaae2f5, 0xfe32e309, 0x5221792a, 0xd9f96eab,
     0x0c55eec7, 0xf3ef5fac, 0xe7fa58e1, 0x22fd6d9c]
